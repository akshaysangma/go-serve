// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: articles.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createArticle = `-- name: CreateArticle :one
INSERT INTO articles (title, content, author_id) VALUES ($1, $2, $3) RETURNING id, title, content, author_id, created_at, updated_at
`

type CreateArticleParams struct {
	Title    string    `db:"title" json:"title"`
	Content  string    `db:"content" json:"content"`
	AuthorID uuid.UUID `db:"author_id" json:"author_id"`
}

func (q *Queries) CreateArticle(ctx context.Context, arg CreateArticleParams) (Article, error) {
	row := q.db.QueryRow(ctx, createArticle, arg.Title, arg.Content, arg.AuthorID)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteArticle = `-- name: DeleteArticle :exec
DELETE FROM articles WHERE id = $1
`

func (q *Queries) DeleteArticle(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteArticle, id)
	return err
}

const getArticleByID = `-- name: GetArticleByID :one
SELECT id, title, content, author_id, created_at, updated_at FROM articles WHERE id = $1 LIMIT 1
`

func (q *Queries) GetArticleByID(ctx context.Context, id uuid.UUID) (Article, error) {
	row := q.db.QueryRow(ctx, getArticleByID, id)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listArticles = `-- name: ListArticles :many
SELECT id, title, content, author_id, created_at, updated_at FROM articles ORDER BY created_at DESC
`

func (q *Queries) ListArticles(ctx context.Context) ([]Article, error) {
	rows, err := q.db.Query(ctx, listArticles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Article{}
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.AuthorID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listArticlesByAuthorID = `-- name: ListArticlesByAuthorID :many
SELECT id, title, content, author_id, created_at, updated_at FROM articles WHERE author_id = $1 ORDER BY created_at DESC
`

func (q *Queries) ListArticlesByAuthorID(ctx context.Context, authorID uuid.UUID) ([]Article, error) {
	rows, err := q.db.Query(ctx, listArticlesByAuthorID, authorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Article{}
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.AuthorID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArticle = `-- name: UpdateArticle :one
UPDATE articles SET title = $2, content = $3, updated_at = NOW() WHERE id = $1 RETURNING id, title, content, author_id, created_at, updated_at
`

type UpdateArticleParams struct {
	ID      uuid.UUID `db:"id" json:"id"`
	Title   string    `db:"title" json:"title"`
	Content string    `db:"content" json:"content"`
}

func (q *Queries) UpdateArticle(ctx context.Context, arg UpdateArticleParams) (Article, error) {
	row := q.db.QueryRow(ctx, updateArticle, arg.ID, arg.Title, arg.Content)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
